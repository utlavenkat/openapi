openapi: 3.0.0
info:
  version: '1.0'
  title: 'OpenAPIHands-On'
  description: 'Specification for Open API Hands-on API.'
  contact:
    name: Venkat Utla
    email: utla.venkat@gmail.com
  license:
    name: Apache 2.0
    url: http://mylicence123.com
  termsOfService: http://mytermsofservice.com
servers: 
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://stage.example.com
    description: Stage Server
  - url: https://prod.example.com
    description: Production Server
paths: 
  /v1/customers:
    get:
      summary: List customers
      description: Get all customers
      tags: 
        - Customers
      operationId: listCustomersV1
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
          
      responses:
        200:
          description: Get  all customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"
                
        400:
          description: Bad Request
        403:
          description: Forbidden - Unauthorized
        404:
          description: No Customers found
        500:
          description: Internal Server error
        503:
          description: Server Unavailable
    post:
      summary: New Customer
      description: Creates a customer
      tags: 
        - Customers
      operationId: createCustomerV1
      requestBody:
        required: true
        description: Customer Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        201:
          description: Customer created
          headers:
            Location:
              description: Location of created customer
              schema:
                type: string
                format: uri
                example: https://dev.example.com/v1/customers/{assignedId}
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        503:
          description: Server Unavailable
  /v1/customers/{customerId}:
    get:
      summary: Get a Customer
      description: Get a Customer by it's Id
      tags: 
        - Customers
      operationId: getCustomerByIdV1
      parameters: 
        - $ref: "#/components/parameters/CustomerIdPathParam"
      responses:
        200:
          description: Customer Details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        404:
          description: No customer Found
        500:
          description: Internal Server Error
        503:
          description: Server Unavailable
    put:
      summary: Update a customer
      description: Update Customer
      tags: 
        - Customers
      operationId: updateCustomerV1
      parameters: 
        - $ref: '#/components/parameters/CustomerIdPathParam'
      requestBody:
        description: Customer Details 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        204:
          description: Customer Updated
        201:
          description: Customer Created
        400:
          description: Bad Reuest
        500:
          description: Internal Server error
        503:
          description: Server unavailable
    delete:
      summary: Delete Customer
      description: Delete Customer by it's id
      tags: 
        - Customers
      operationId: deleteCustomerByIdV1
      parameters: 
        - $ref: '#/components/parameters/CustomerIdPathParam'
      responses:
        200:
          description: Customer Deleted
        404: 
          description: No customer found
        500:
          description: Internal server error
        503:
          description: Server unavailable
  /v1/beers:
    get:
      summary: List beers
      description: Get all beers
      tags: 
        - Beers
      operationId: listBeersV1
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
            
      responses:
        200:
          description: Gell All Beers
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/PagedBeerResponse"
        404:
          description: No beers found
        500:
          description: Internal Server error
        503:
          description: Server unavailable
    post:
      summary: New beer
      description: Creates a beer
      tags: 
        - Beers
      operationId: createBeerV1
      requestBody:
        required: true
        description: Beer request payload
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Beer"
      responses:
        201:
          description: Beer created
          headers:
            Location:
              description: Path of the beer created
              schema:
                type: string
                format: uri
                example: https://dev.example.com/v1/beers/{assignedId}
        400:
          description: Bad request
        500:
          description: Internal Server error
        503:
          description: Server unavailable
  /v1/beers/{beerId}:
    get:
      summary: Get a beer
      description: Get a Beer by it's Id
      tags: 
        - Beers
      operationId: getBeerByIdV1
      parameters: 
        - $ref: '#/components/parameters/BeerIdPathParam'
      responses:
        200:
          description: Beer Details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beer"
        404:
          description: Beer not found
        500:
          description: Internal Server error
        503:
          description: Server unavailable
    put:
      summary: Update a beer
      description: Updates a beer
      tags: 
        - Beers
      operationId: updateBeerV1
      parameters: 
        - $ref: "#/components/parameters/BeerIdPathParam"
      requestBody:
        description: Beer Details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Beer"
      responses:
        204:
          description: Beer Updated
        201:
          description: Beer Created
        400:
          description: Bad Request
        500:
          description: Internal Server error
        503:
          description: Server unavailable
    delete:
      summary: Delete Beer
      description: Delete beer by it's Id.
      tags: 
        - Beers
      operationId: deleteBeerById
      parameters: 
        - $ref: '#/components/parameters/BeerIdPathParam'
      responses:
        200:
          description: Beer Deleted
        404:
          description: Beer not found
        500:
          description: Internal server error
        503:
          description: Server unavailable
        
components:
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 9th phase
        line2:
          type: string
          example: KPHB Colony
        city:
          type: string
          example: Hyderabad
        state:
          type: string
          enum: [AP,TS,TN,KA,KE]
        zipcode:
          type: string
          example: 500072
    Customer:
      type: object
      description: Customer Details
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: Venkat
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          example: Utla
        dateOfBirth:
          type: string
          format: date
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/Customer'
    CustomerPagedList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PagedResponse'
      properties:
        content:
          $ref: '#/components/schemas/CustomerList'
          
        
    Brewery:
      type: object
      properties:
        name:
          type: string
          example: Repeat
        location:
          type: string
          example: Ameerpet
    Beer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: King Fisher
        style:
          type: string
          enum: [ALE, PALE_ALE, IPA, WHEAT, LAGER]
        upc:
          type: string
        price:
          type: number
          format: double
          example: 100.25
        quantity:
          type: integer
          example: 2
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      minItems: 1
      items:
        $ref : "#/components/schemas/Beer"
    PagedBeerResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeerList"
    PagedResponse:
      type: object
      properties:
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
            pageSize:
              type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      schema:
        type: integer
        format: int32
        default: 100
    CustomerIdPathParam:
      name: customerId
      in: path
      required: true
      description: Customer Id
      schema:
        type: string
        format: uuid
    BeerIdPathParam:
      name: beerId
      in: path
      description:  Beer Id
      required: true
      schema:
        type: string
        format: uuid
